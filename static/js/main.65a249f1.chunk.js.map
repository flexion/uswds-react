{"version":3,"sources":["logo.svg","components/Grid.js","components/Button.js","features/counter/counterSlice.js","features/counter/Counter.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","className","children","props","classnames","Row","gap","Col","size","tablet","desktop","offset","defaultProps","nodes","a","to","type","href","target","rel","b","link","Button","color","variant","raised","onClick","external","fullwidth","forceExternalOff","classes","url","Node","timeout","ms","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","amount","counterSlice","createSlice","name","initialState","loading","value","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","pending","fulfilled","actions","selectCount","counter","pendingCount","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","aria-label","icon","disabled","onChange","e","class","Number","spin","App","src","logo","alt","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","library","add","far","fas","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65a249f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5047b988.svg\";","import React from \"react\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nconst computeSizes = (amount = 12) =>\n  Array.from(Array(amount).keys()).reduce((acc, cur) => {\n    const value = ++cur;\n    const string = value.toString();\n    return [...acc, value, string];\n  }, []);\n\nexport const Grid = ({ className, children, ...props }) => {\n  return (\n    <div\n      className={classnames({\n        \"grid-container\": true,\n        [className]: className,\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nGrid.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport const Row = ({ className, gap, children, ...props }) => {\n  return (\n    <div\n      className={classnames({\n        \"grid-row\": true,\n        [`grid-gap-${gap}`]: gap,\n        [className]: className,\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst rowSizes = computeSizes(6);\n\nRow.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  gap: PropTypes.oneOf(rowSizes),\n};\n\nexport const Col = ({\n  className,\n  size,\n  tablet,\n  desktop,\n  offset,\n  children,\n  ...props\n}) => {\n  return (\n    <div\n      className={classnames({\n        [`grid-col-${size}`]: size,\n        [`tablet:grid-col-${tablet}`]: tablet,\n        [`desktop:grid-col-${desktop}`]: desktop,\n        [className]: className,\n        [`grid-offset-${offset}`]: offset,\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nCol.defaultProps = {\n  size: \"12\",\n};\n\nconst colSizes = computeSizes();\n\nCol.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  size: PropTypes.oneOf(colSizes),\n  tablet: PropTypes.oneOf(colSizes),\n  desktop: PropTypes.oneOf(colSizes),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\n\nconst nodes = {\n  a: ({ to, children, type, ...props }) => (\n    <a {...props} href={to} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </a>\n  ),\n  b: ({ to, type = \"button\", ...props }) => <button type={type} {...props} />,\n  link: ({ type, ...props }) => <Link {...props} />,\n};\n\nexport const Button = ({\n  children,\n  className,\n  color,\n  variant,\n  raised,\n  to,\n  onClick,\n  external,\n  forceExternalOff,\n  fullwidth,\n  type,\n  ...props\n}) => {\n  const classes = classnames({\n    \"use-button\": true,\n    [`usa-button--${color}`]: color,\n    [`usa-button--${color}-${variant}`]: variant,\n    \"usa-button--fullwidth\": fullwidth,\n    \"usa-button--raised\": raised,\n    [className]: className,\n  });\n\n  const url = typeof to === \"string\" ? to : \"\";\n  const Node =\n    onClick || type ? nodes[\"b\"] : external ? nodes[\"a\"] : nodes[\"link\"];\n  return (\n    <Node to={url} type={type} onClick={onClick} {...props} className={classes}>\n      {children}\n    </Node>\n  );\n};\n\nButton.defaultProps = {\n  color: \"primary\",\n  forceExternalOff: false,\n};\nButton.propTypes = {\n  /** component children to be rendered */\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node,\n    PropTypes.element,\n  ]),\n  /** classnames applied to component */\n  className: PropTypes.string,\n  /** defines the component base color */\n  color: PropTypes.oneOf([\n    \"primary\",\n    \"secondary\",\n    \"accent-warm\",\n    \"accent-cool\",\n  ]),\n  /** sets variant button type */\n  variant: PropTypes.oneOf([\"link\", \"media\", \"outline\", \"white\"]),\n  /** describes the location for the <Link> or <a> render */\n  to: PropTypes.string,\n  /** sets button type for the <button> render */\n  type: PropTypes.string,\n  /** onClick event for the <button> render */\n  onClick: PropTypes.func,\n  /** boolean for setting the external link icon */\n  external: PropTypes.bool,\n  /** boolean for disabling the external link icon */\n  forceExternalOff: PropTypes.bool,\n  /** boolean to render a fullwidth button */\n  fullwidth: PropTypes.bool,\n  /** boolean to render a raised (with shadow) button  */\n  raised: PropTypes.bool,\n};\n\nexport default Button;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\nexport const incrementAsync = createAsyncThunk(\r\n  \"counter/incrementAsync\",\r\n  async (amount) => {\r\n    await timeout(2000);\r\n    return amount;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    loading: false,\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [incrementAsync.pending]: (state, action) => ({ ...state, pending: true }),\r\n    [incrementAsync.fulfilled]: (state, action) => ({\r\n      pending: false,\r\n      value: state.value + action.payload,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport const selectCount = (state) => state.counter.value;\r\nexport const pendingCount = (state) => state.counter.pending;\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FontAwesomeIcon as Fa } from \"@fortawesome/react-fontawesome\";\r\nimport Button from \"components/Button\";\r\nimport { Grid, Row, Col } from \"components/Grid\";\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  selectCount,\r\n  pendingCount,\r\n} from \"./counterSlice\";\r\nimport \"./Counter.scss\";\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const pending = useSelector(pendingCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState(\"2\");\r\n\r\n  return (\r\n    <Grid>\r\n      <Row className=\"Counter__header\">\r\n        <Col>\r\n          <Button\r\n            aria-label=\"Increment value\"\r\n            variant=\"link\"\r\n            onClick={() => dispatch(increment())}\r\n          >\r\n            <Fa icon={\"plus-circle\"} />\r\n          </Button>\r\n          <h2 className=\"Counter__count\">{count}</h2>\r\n          <Button\r\n            aria-label=\"Decrement value\"\r\n            variant=\"link\"\r\n            onClick={() => dispatch(decrement())}\r\n          >\r\n            <Fa icon={\"minus-circle\"} />\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"Counter__form\">\r\n        <Col size={12}>\r\n          <input\r\n            className=\"usa-input\"\r\n            aria-label=\"Set increment amount\"\r\n            value={incrementAmount}\r\n            disabled={pending}\r\n            onChange={(e) => setIncrementAmount(e.target.value)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gap={4}>\r\n        <Col size={12} className=\"text-center\">\r\n          <div className=\"display-inline-block\">\r\n            <ul class=\"usa-button-group usa-button-group--segmented\">\r\n              <li class=\"usa-button-group__item\">\r\n                <Button\r\n                  onClick={() =>\r\n                    dispatch(incrementByAmount(Number(incrementAmount) || 0))\r\n                  }\r\n                >\r\n                  Add Amount\r\n                </Button>\r\n              </li>\r\n              <li class=\"usa-button-group__item\">\r\n                <Button\r\n                  className\r\n                  color=\"accent-warm\"\r\n                  disabled={pending}\r\n                  onClick={() =>\r\n                    dispatch(incrementAsync(Number(incrementAmount) || 0))\r\n                  }\r\n                >\r\n                  {pending ? (\r\n                    <span>\r\n                      <Fa\r\n                        className=\"margin-right-1 display-inline-block\"\r\n                        icon=\"spinner\"\r\n                        spin\r\n                      />{\" \"}\r\n                      {\"Pending...\"}\r\n                    </span>\r\n                  ) : (\r\n                    \"Add Async\"\r\n                  )}\r\n                </Button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport { Grid, Row, Col } from \"components/Grid\";\r\nimport { Counter } from \"./features/counter/Counter\";\r\nimport \"styles/index.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid>\r\n        <Row>\r\n          <Col size={12} className=\"text-center padding-y-6\">\r\n            <header className=\"App-header\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </header>\r\n          </Col>\r\n        </Row>\r\n      </Grid>\r\n      <Counter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nlibrary.add(far, fas);\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}