{"version":3,"sources":["routes/Default/logo.svg","components/Grid/index.js","routes/Default/index.js","routes/index.js","app/SwapiModule/context/swapi.js","app/SwapiModule/context/test.js","app/SwapiModule/context/index.js","app/SwapiModule/index.js","app/index.js","serviceWorker.js","templates/Primary/index.js","index.js"],"names":["module","exports","Grid","className","children","props","classnames","Row","gap","Col","size","tablet","desktop","offset","defaultProps","Default","src","logo","alt","location","key","path","component","exact","getFilms","a","getFilmById","id","testData","characters","created","director","edited","episode_id","opening_crawl","planets","producer","release_date","species","starships","title","url","vehicles","format","Error","context","swapi","initialState","filmList","data","pending","error","currentFilm","getFilmList","createAsyncThunk","getCurrentFilm","slice","createSlice","name","reducers","reset","extraReducers","state","action","fulfilled","payload","rejected","actions","configureStore","reducer","Boolean","window","hostname","match","Primary","library","add","far","fas","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9507e30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5047b988.svg\";","import React from \"react\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nconst computeSizes = (amount = 12) =>\n  Array.from(Array(amount).keys()).reduce((acc, cur) => {\n    const value = ++cur;\n    const string = value.toString();\n    return [...acc, value, string];\n  }, []);\n\nexport const Grid = ({ className, children, ...props }) => {\n  return (\n    <div\n      className={classnames({\n        \"grid-container\": true,\n        [className]: className,\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nGrid.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport const Row = ({ className, gap, children, ...props }) => {\n  return (\n    <div\n      className={classnames({\n        \"grid-row\": true,\n        [`grid-gap-${gap}`]: gap,\n        [className]: className,\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst rowSizes = computeSizes(6);\n\nRow.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  gap: PropTypes.oneOf(rowSizes),\n};\n\nexport const Col = ({\n  className,\n  size,\n  tablet,\n  desktop,\n  offset,\n  children,\n  ...props\n}) => {\n  return (\n    <div\n      className={classnames({\n        [`grid-col-${size}`]: size,\n        [`tablet:grid-col-${tablet}`]: tablet,\n        [`desktop:grid-col-${desktop}`]: desktop,\n        [className]: className,\n        [`grid-offset-${offset}`]: offset,\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nCol.defaultProps = {\n  size: \"12\",\n};\n\nconst colSizes = computeSizes();\n\nCol.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  size: PropTypes.oneOf(colSizes),\n  tablet: PropTypes.oneOf(colSizes),\n  desktop: PropTypes.oneOf(colSizes),\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport { Grid, Row, Col } from \"components/Grid\";\n\nconst Default = () => {\n  return (\n    <Grid>\n      <Row>\n        <Col size={12} className=\"text-center padding-y-6\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </header>\n        </Col>\n      </Row>\n      <Row>\n        <Col size={12}></Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default Default;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Default from \"./Default\";\n\nexport default ({ location }) => (\n  <Switch location={location}>\n    <Route key=\"default\" path=\"/\" component={Default} exact />\n  </Switch>\n);\n","/* istanbul ignore file */\n\nexport const getFilms = async () => {\n  return [];\n};\n\nexport const getFilmById = async ({ id }) => {\n  return {};\n};\n","/* istanbul ignore file */\nconst testData = [\n  {\n    characters: [],\n    created: \"2014-12-10T14:23:31.880000Z\",\n    director: \"George Lucas\",\n    edited: \"2014-12-12T11:24:39.858000Z\",\n    episode_id: 4,\n    opening_crawl:\n      \"It is a period of civil war.\\n\\nRebel spaceships, striking\\n\\nfrom a hidden base, have won\\n\\ntheir first victory against\\n\\nthe evil Galactic Empire.\\n\\n\\n\\nDuring the battle, Rebel\\n\\nspies managed to steal secret\\r\\nplans to the Empire's\\n\\nultimate weapon, the DEATH\\n\\nSTAR, an armored space\\n\\nstation with enough power\\n\\nto destroy an entire planet.\\n\\n\\n\\nPursued by the Empire's\\n\\nsinister agents, Princess\\n\\nLeia races home aboard her\\n\\nstarship, custodian of the\\n\\nstolen plans that can save her\\n\\npeople and restore\\n\\nfreedom to the galaxy....\",\n    planets: [],\n    producer: \"Gary Kurtz, Rick McCallum\",\n    release_date: \"1977-05-25\",\n    species: [],\n    starships: [],\n    title: \"A New Hope\",\n    url: \"https://swapi.dev/api/films/1/\",\n    vehicles: [],\n  },\n  {\n    characters: [],\n    created: \"2014-12-10T14:23:31.880000Z\",\n    director: \"George Lucas\",\n    edited: \"2014-12-12T11:24:39.858000Z\",\n    episode_id: 4,\n    opening_crawl:\n      \"It is a period of civil war.\\n\\nRebel spaceships, striking\\n\\nfrom a hidden base, have won\\n\\ntheir first victory against\\n\\nthe evil Galactic Empire.\\n\\n\\n\\nDuring the battle, Rebel\\n\\nspies managed to steal secret\\r\\nplans to the Empire's\\n\\nultimate weapon, the DEATH\\n\\nSTAR, an armored space\\n\\nstation with enough power\\n\\nto destroy an entire planet.\\n\\n\\n\\nPursued by the Empire's\\n\\nsinister agents, Princess\\n\\nLeia races home aboard her\\n\\nstarship, custodian of the\\n\\nstolen plans that can save her\\n\\npeople and restore\\n\\nfreedom to the galaxy....\",\n    planets: [],\n    producer: \"Gary Kurtz, Rick McCallum\",\n    release_date: \"1977-05-25\",\n    species: [],\n    starships: [],\n    title: \"A New Hope\",\n    url: \"https://swapi.dev/api/films/1/\",\n    vehicles: [],\n  },\n];\n\n/**\n * Returns a list of Star Wars Films\n */\nexport const getFilms = async (props = {}) => {\n  const { format = \"\" } = props;\n  if (format === \"error\") {\n    throw new Error(\"Invalid Format\");\n  }\n  return testData;\n};\n\n/**\n * Returns an individual Star Wars Film\n *\n * @param {getFilmById} getFilmByIdParams\n * @typedef {Object} getFilmById\n * @property {string} id - movie id by release order\n */\nexport const getFilmById = async (props = {}) => {\n  const { id } = props;\n  if (id !== 1) {\n    throw new Error(\"Invalid Id\");\n  }\n  return testData[0];\n};\n","/* istanbul ignore file */\nimport * as swapi from \"./swapi\";\nimport * as test from \"./test\";\n\nlet context = test;\n\nif (process.env.NODE_ENV !== \"test\") {\n  context = swapi;\n}\n\nexport default context;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport context from \"./context\";\n\nexport const initialState = {\n  filmList: {\n    data: [],\n    pending: false,\n    error: null,\n  },\n  currentFilm: {\n    data: {},\n    pending: false,\n    error: null,\n  },\n};\n\nexport const getFilmList = createAsyncThunk(\n  \"swapi/getFilmList\",\n  async (props = {}) => await context.getFilms({ format: props.format })\n);\n\nexport const getCurrentFilm = createAsyncThunk(\n  \"swapi/getCurrentFilm\",\n  async (props = {}) => await context.getFilmById({ id: props.id })\n);\n\nconst slice = createSlice({\n  name: \"swapi\",\n  initialState,\n  reducers: {\n    reset: () => initialState,\n  },\n  extraReducers: {\n    [getFilmList.pending]: (state, action) => ({\n      ...state,\n      filmList: { ...initialState.filmList, pending: true },\n    }),\n    [getFilmList.fulfilled]: (state, action) => ({\n      ...state,\n      filmList: { ...initialState.filmList, data: action.payload },\n    }),\n    [getFilmList.rejected]: (state, action) => ({\n      ...state,\n      filmList: { ...initialState.filmList, error: action.error },\n    }),\n    [getCurrentFilm.pending]: (state, action) => ({\n      ...state,\n      currentFilm: { ...initialState.currentFilm, pending: true },\n    }),\n    [getCurrentFilm.fulfilled]: (state, action) => {\n      return {\n        ...state,\n        currentFilm: { ...initialState.currentFilm, data: action.payload },\n      };\n    },\n    [getCurrentFilm.rejected]: (state, action) => ({\n      ...state,\n      currentFilm: { ...initialState.currentFilm, error: action.error },\n    }),\n  },\n});\n\nexport const { reset } = slice.actions;\n\nexport default slice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport swapi from \"./SwapiModule\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    swapi,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"styles/index.scss\";\r\n\r\nconst Primary = ({ children }) => {\r\n  return <div className=\"App\">{children}</div>;\r\n};\r\n\r\nexport default Primary;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./index.css\";\r\nimport Routes from \"./routes\";\r\nimport store from \"./app\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Primary from \"templates/Primary\";\r\n\r\nlibrary.add(far, fas);\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Provider store={store}>\r\n        <Primary>\r\n          <Routes />\r\n        </Primary>\r\n      </Provider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}